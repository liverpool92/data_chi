from pathlib import Path
import pandas as pd
import matplotlib.pyplot as plt
import re
import warnings

# ====== Config ======
DATA_DIR = Path(r"C:\Users\g1awl01\Downloads\RTA files new")  # <-- change if needed
OUT_DIR = DATA_DIR / "analysis_out_novel"
OUT_DIR.mkdir(exist_ok=True)

FILENAMES = {
    "lower": {
        "full":  "RTA_TRQ_full_summary_lower_aug.csv",
        "tl":    "RTA_TRQ_descriptive_by_tl_lower_aug.csv",
        "year":  "RTA_TRQ_descriptive_by_year_lower_aug.csv",
    },
    "upper": {
        "full":  "RTA_TRQ_full_summary_upper_aug.csv",
        "tl":    "RTA_TRQ_descriptive_by_tl_upper_aug.csv",
        "year":  "RTA_TRQ_descriptive_by_year_upper_aug.csv",
    },
}

REGION_MAP_CSV = DATA_DIR / "country_region_map.csv"  # put file here if you have it

# ====== Helpers ======

def load_bound_frames(bound_key: str):
    files = FILENAMES[bound_key]
    full = pd.read_csv(DATA_DIR / files["full"])
    full['reporter'] = full['country_pair'].apply(clean_reporter)
    tl   = pd.read_csv(DATA_DIR / files["tl"])
    tl['reporter'] = tl['country_pair'].apply(clean_reporter)
    yr   = pd.read_csv(DATA_DIR / files["year"])
    yr['reporter'] = yr['country_pair'].apply(clean_reporter)
    return full, tl, yr

def add_reporter_partner(df: pd.DataFrame):
    """
    Split country_pair 'Reporter-Partner' -> reporter, partner.
    If your naming differs, adjust here.
    """
    parts = df["country_pair"].str.split("-", n=1, expand=True)
    df["reporter"] = parts[0].str.strip()
    df["partner"]  = parts[1].str.strip() if parts.shape[1] > 1 else ""
    return df

def clean_reporter(raw_name):
    import re
    return re.split(r'\s*\(|\s*-\s*', str(raw_name))[0].strip()



# HS 2-digit chapter -> big sector bucket (from your screenshot)
HS_BUCKETS = [
    ((1,5),   "Animal & Animal Products"),
    ((6,15),  "Vegetable Products"),
    ((16,24), "Foodstuffs"),
    ((25,27), "Mineral Products"),
    ((28,38), "Chemicals & Allied Industries"),
    ((39,40), "Plastics / Rubbers"),
    ((41,43), "Raw Hides, Skins, Leather, & Furs"),
    ((44,49), "Wood & Wood Products"),
    ((50,63), "Textiles"),
    ((64,67), "Footwear / Headgear"),
    ((68,71), "Stone / Glass"),
    ((72,83), "Metals"),
    ((84,85), "Machinery / Electrical"),
    ((86,89), "Transportation"),
    ((90,97), "Miscellaneous"),
]

def hs2_to_sector(hs2: int):
    for (lo, hi), name in HS_BUCKETS:
        if lo <= hs2 <= hi:
            return name
    return "Unknown"

def attach_sector(df_full: pd.DataFrame):
    # expect column 'tl_6digit'
    hs2 = df_full["tl_6digit"].astype(str).str.slice(0,2).str.replace(r"\D","",regex=True)
    hs2 = pd.to_numeric(hs2, errors="coerce")
    df_full["hs2"] = hs2
    df_full["sector"] = df_full["hs2"].apply(lambda x: hs2_to_sector(int(x)) if pd.notna(x) else "Unknown")
    return df_full

def safe_pct(numer, denom):
    denom = denom if denom != 0 else 1.0
    return numer / denom

def summarize_bound(bound_key: str):
    """Compute all requested stats for a bound, return dict of DataFrames and print a small text summary."""
    full, tl, yr = load_bound_frames(bound_key)

    # normalize columns just in case
    for df in (full, tl, yr):
        for col in ["trq_value", "total_value"]:
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0)

    # basic parsing
    full = add_reporter_partner(full)
    full = attach_sector(full)

    # ---- Agreements coverage ----
    agreements_all = full["country_pair"].nunique()
    agreements_with_trq = full.loc[full["trq_value"] > 0, "country_pair"].nunique()
    frac_agreements_with_trq = safe_pct(agreements_with_trq, agreements_all)

    # ---- Dollar share covered by TRQs ----
    total_val = full["total_value"].sum()
    total_trq = full["trq_value"].sum()
    pct_value_trq = safe_pct(total_trq, total_val)

    # ---- Percent of products covered (TL6 with TRQ / TL6 with any trade) ----
    products_all = full.loc[full["total_value"] > 0, "tl_6digit"].nunique()
    products_trq = full.loc[full["trq_value"]  > 0, "tl_6digit"].nunique()
    pct_products_trq = safe_pct(products_trq, products_all)

    # ---- For TRQ agreements: number of products per agreement ----
    tl_per_agreement = (full[full["trq_value"] > 0]
                         .groupby("country_pair")["tl_6digit"].nunique()
                         .rename("trq_products"))
    trq_agreement_stats = pd.DataFrame({
        "country_pair": tl_per_agreement.index,
        "trq_products": tl_per_agreement.values
    })
    trq_agreement_summary = trq_agreement_stats["trq_products"].describe().to_frame(name="count_of_products_per_trq_agreement")

    # ---- Countries engaging most with TRQs (by reporter TRQ share) ----
    by_reporter = (full.groupby("reporter")[["trq_value","total_value"]]
                      .sum()
                      .assign(trq_share=lambda d: d["trq_value"]/d["total_value"].replace(0,1))
                      .sort_values("trq_share", ascending=False))
    top_reporters = by_reporter[["trq_share"]].reset_index()

    # ---- Time series: overall TRQ share ----
    overall_year = (full.groupby("year")[["trq_value","total_value"]]
                       .sum()
                       .assign(trq_share=lambda d: d["trq_value"]/d["total_value"].replace(0,1))
                       .reset_index())

    # ---- Time series by sector (HS bucket) ----
    sector_year = (full.groupby(["year","sector"])[["trq_value","total_value"]]
                      .sum()
                      .reset_index())
    sector_year["trq_share"] = sector_year["trq_value"] / sector_year["total_value"].replace(0,1)

    # ---- Time series by region (requires region map) ----
    region_year = None
    if REGION_MAP_CSV.exists():
        reg = pd.read_csv(REGION_MAP_CSV)
        reg.columns = [c.strip().lower() for c in reg.columns]
        if not {"country","region"}.issubset(reg.columns):
            warnings.warn("country_region_map.csv must have columns: country, region")
        else:
            reg["country"] = reg["country"].str.strip()
            full["reporter"] = full["reporter"].str.strip()
            full_reg = full.merge(reg, left_on="reporter", right_on="country", how="left")
            region_year = (full_reg.groupby(["year","region"])[["trq_value","total_value"]]
                              .sum()
                              .reset_index())
            region_year["trq_share"] = region_year["trq_value"] / region_year["total_value"].replace(0,1)

    # ---- Save tables ----
    text_summary = pd.DataFrame({
        "metric": [
            "agreements_total",
            "agreements_with_trq",
            "fraction_agreements_with_trq",
            "total_trade_value",
            "total_trq_value",
            "percent_trade_value_trq",
            "products_total_tl6",
            "products_trq_tl6",
            "percent_products_trq",
        ],
        "value": [
            agreements_all,
            agreements_with_trq,
            frac_agreements_with_trq,
            total_val,
            total_trq,
            pct_value_trq,
            products_all,
            products_trq,
            pct_products_trq,
        ]
    })
    text_summary.to_csv(OUT_DIR / f"{bound_key}_headline_metrics.csv", index=False)
    trq_agreement_stats.to_csv(OUT_DIR / f"{bound_key}_trq_products_per_agreement.csv", index=False)
    trq_agreement_summary.to_csv(OUT_DIR / f"{bound_key}_trq_products_per_agreement_summary.csv")
    top_reporters.to_csv(OUT_DIR / f"{bound_key}_top_reporters_by_trq_share.csv", index=False)
    overall_year.to_csv(OUT_DIR / f"{bound_key}_overall_trq_share_by_year.csv", index=False)
    sector_year.to_csv(OUT_DIR / f"{bound_key}_sector_trq_share_by_year.csv", index=False)
    if region_year is not None:
        region_year.to_csv(OUT_DIR / f"{bound_key}_region_trq_share_by_year.csv", index=False)

    # ---- Plots ----
    # Overall TRQ share over time
    plt.figure()
    plt.plot(overall_year["year"], overall_year["trq_share"], marker="o")
    plt.title(f"{bound_key.upper()} — TRQ share of trade value over time")
    plt.xlabel("Year")
    plt.ylabel("TRQ share of value")
    plt.grid(True, alpha=.3)
    plt.tight_layout()
    plt.savefig(OUT_DIR / f"{bound_key}_overall_trq_share.png", dpi=200)
    plt.close()

    # By sector: plot top 8 sectors by total trade value to keep readable
    top_sectors = (sector_year.groupby("sector")["total_value"].sum().sort_values(ascending=False).head(8).index)
    plt.figure()
    for sec in top_sectors:
        s = sector_year[sector_year["sector"] == sec]
        plt.plot(s["year"], s["trq_share"], marker=".", label=sec)
    plt.legend(loc="best", fontsize=8)
    plt.title(f"{bound_key.upper()} — TRQ share over time by sector (top 8)")
    plt.xlabel("Year")
    plt.ylabel("TRQ share of value")
    plt.grid(True, alpha=.3)
    plt.tight_layout()
    plt.savefig(OUT_DIR / f"{bound_key}_sector_trq_share.png", dpi=200)
    plt.close()

    # By region if available
    if region_year is not None:
        top_regions = (region_year.groupby("region")["total_value"].sum()
                                  .sort_values(ascending=False).head(10).index)
        plt.figure()
        for r in top_regions:
            s = region_year[region_year["region"] == r]
            plt.plot(s["year"], s["trq_share"], marker=".", label=str(r))
        plt.legend(loc="best", fontsize=8)
        plt.title(f"{bound_key.upper()} — TRQ share over time by region (top 10)")
        plt.xlabel("Year")
        plt.ylabel("TRQ share of value")
        plt.grid(True, alpha=.3)
        plt.tight_layout()
        plt.savefig(OUT_DIR / f"{bound_key}_region_trq_share.png", dpi=200)
        plt.close()

    return {
        "headline": text_summary,
        "overall_year": overall_year,
        "sector_year": sector_year,
        "region_year": region_year,
        "top_reporters": top_reporters,
        "trq_agreement_stats": trq_agreement_stats,
    }

# ====== Run both bounds & also put an upper-vs-lower comparison line chart ======
print("running rn")
lower = summarize_bound("lower")
upper = summarize_bound("upper")

# Upper vs Lower — overall TRQ share over time on same plot
comp = (lower["overall_year"][["year","trq_share"]].rename(columns={"trq_share":"lower"})
          .merge(upper["overall_year"][["year","trq_share"]].rename(columns={"trq_share":"upper"}),
                 on="year", how="outer").sort_values("year"))
comp.to_csv(OUT_DIR / "upper_vs_lower_trq_share_by_year.csv", index=False)

plt.figure()
plt.plot(comp["year"], comp["lower"], marker="o", label="Lower bound")
plt.plot(comp["year"], comp["upper"], marker="o", label="Upper bound")
plt.title("TRQ share of trade value over time — Upper vs Lower")
plt.xlabel("Year")
plt.ylabel("TRQ share of value")
plt.legend()
plt.grid(True, alpha=.3)
plt.tight_layout()
plt.savefig(OUT_DIR / "upper_vs_lower_trq_share.png", dpi=200)
plt.close()

print("All summaries and plots saved to:", OUT_DIR)
